*ccc.txt*					Create Color Code in neovim.

==============================================================================
Contents                                                          *ccc-contents*


Introduction						|ccc-introduction|
Setup							|ccc-setup|
Option							|ccc-option|
Command							|ccc-command|
Key mapping						|ccc-key-mapping|
Variable						|ccc-variable|
Autocmd							|ccc-autocmd|
Action							|ccc-action|



==============================================================================
Introduction                                                  *ccc-introduction*


Use the sliders, easy, to create any color you want!

Features:
- You can use RGB, HSL, and other color system sliders for color adjustment.
- Dynamic highlighting of sliders.
- Record and restore previously used colors.
- Selectable output formats.
- Transparent slider (for css rgb()/hsl())
- Highlight colors that can be picked up for current buffer.



==============================================================================
Setup                                                                *ccc-setup*


If you do not want to change the default setting, there is no need to call
setup (Empty setup is done automatically by plugin/ccc.lua).
See |ccc-option| for the options that can be specified.


>
	local ccc = require("ccc")
	local mapping = ccc.mapping
	
	ccc.setup({
		-- Your favorite settings
	})
<



==============================================================================
Option                                                             *ccc-option*


                                                      *ccc-option-default-color*
default_color ~
string
Default: "#000000"
	The default color used when a color cannot be picked. It must be HEX
	format. See also |ccc-option-preserve|.


                                                           *ccc-option-bar-char*
bar_char ~
string
Default: "■"
	The character used for the sliders.


                                                         *ccc-option-point-char*
point_char ~
string
Default: "◇"
	The character used for the cursor point on the sliders.


                                                        *ccc-option-point-color*
point_color ~
string
Default: ""
	The color of the cursor point on the sliders. It must be HEX format.
	If it is empty string (""), like the other part of the sliders, it is
	dynamically highlighted.


                                                            *ccc-option-bar-len*
bar_len ~
integer
Default: 30
	The length of the slider (not byte length). This value number of
	bar_chars form a slider.


                                                           *ccc-option-win-opts*
win_opts ~
table
Default: {
	relative = "cursor",
	row = 1,
	col = 1,
	style = "minimal",
	border = "rounded",
}
	The options passed to the |nvim_open_win|. 'width' and 'height' cannot
	be specified.


                                                           *ccc-option-preserve*
preserve ~
boolean
Default: false
	Whether to preserve the colors when the UI is closed. If this is true,
	you can start where you left off last time.


                                                       *ccc-option-save-on-quit*
save_on_quit ~
boolean
Default: false
	Whether to add colors to prev_colors when quit (|ccc-action-quit|).


                                                             *ccc-option-inputs*
inputs ~
table
Default: {
	ccc.input.rgb,
	ccc.input.hsl,
	ccc.input.cmyk,
}
	List of color system to be activated. |ccc-action-toggle-input-mode|
	toggles in this order. The first one is the default used at the first
	startup. Once activated, it will keep the previous input mode.
	The presets currently available are as follows:
		- RGB:   ccc.input.rgb
		- HSL:   ccc.input.hsl
		- CMYK:  ccc.input.cmyk
		- Lab:   ccc.input.lab
		- HSLuv: ccc.input.hsluv
		- XYZ:   ccc.input.xyz
		- HSV:   ccc.input.hsv


                                                            *ccc-option-outputs*
outputs ~
table
Default: {
	ccc.output.hex,
	ccc.output.hex_short,
	ccc.output.css_rgb,
	ccc.output.css_hsl,
}
	List of output format to be activated. |ccc-action-toggle-output-mode|
	toggles in this order. The first one is the default used at the first
	startup. Once activated, it will keep the previous output mode.
	The presets currently available are as follows:
		- HEX:    ccc.output.hex
		          ccc.output.hex_short
		- CssRGB: ccc.output.css_rgb
		- CssHSL: ccc.output.css_hsl


                                                            *ccc-option-pickers*
pickers ~
table
Default: {
	ccc.picker.hex,
	ccc.picker.css_rgb,
	ccc.picker.css_hsl,
}
	List of formats that can be detected by |:CccPick| to be activated.
	The presets currently available are as follows:
		- HEX:     ccc.picker.hex
		- CssRGB:  ccc.picker.css_rgb
		- CssHSL:  ccc.picker.css_hsl
		- CssName: ccc.picker.css_name
	If it picks up even the parts you do not want picked up, try
	|ccc-option-exclude-pattern|.


                                                    *ccc-option-exclude-pattern*
exclude_pattern ~
table
Default: {
	hex = {
		"[%w_]{{pattern}}",
		"{{pattern}}[%w_]",
	},
	css_rgb = nil,
	css_hsl = nil,
	css_name = {
		"[%w_]{{pattern}}",
		"{{pattern}}[%w_]",
	},
}
	Define exclude patterns for each picker. `{{pattern}}` is expanded to
	the pattern defined in each picker. For example, default option of hex
	excludes 'foo#add' in the vim script.


                                                        *ccc-option-output-line*
output_line ~
function
Default: ccc.output_line
	This function is used to create a row below the slider that displays
	the colors before and after the change. See source code for details.


                                                        *ccc-option-highlighter*
highlighter ~
table
	These are settings for CccHighlighter.


                                            *ccc-option-highlighter-auto-enable*
highlighter.auto_enable ~
boolean
Default: false
	Whether to enable at startup.


                                              *ccc-option-highlighter-filetypes*
highlighter.filetypes ~
string[]
Default: {}
	File types for which highlighting is enabled. An empty table means all
	file types.


                                               *ccc-option-highlighter-excludes*
highlighter.excludes ~
string[]
Default: {}
	Used only when |ccc-option-highlighter-filetypes| is empty table. You
	can specify file types to be excludes.


                                                 *ccc-option-highlighter-events*
highlighter.events ~
string[]
Default: { "WinScrolled", "TextChanged", "TextChangedI" }
	Events to update highlighting.


                                           *ccc-option-disable-default-mappings*
disable_default_mappings ~
boolean
Default: false
	If true, all default mappings are disabled.


                                                           *ccc-option-mappings*
mappings ~
table
Default: See |ccc-action|
	The mappings are set in the UI of ccc. The table where lhs is key and
	rhs is value. To disable all default mappings, use
	|ccc-option-disable-default-mappings|. To disable only some of the
	default mappings, set ccc.mapping.none.


>
	local ccc = require("ccc")
	local mapping = ccc.mapping

	ccc.setup({
		-- Disable all default mappings
		-- disable_default_mappings = true
		mappings = {
			-- Disable only 'q' (|ccc-action-quit|)
			q = mapping.none
		}
	})
<



==============================================================================
Command                                                            *ccc-command*


                                                                      *:CccPick*
:CccPick ~
	Detects and replaces the color under the cursor. Detectable formats
	are defined in |ccc-option-pickers|. If nothing is detected, the color
	is inserted at a cursor position.


                                                         *:CccHighlighterEnable*
:CccHighlighterEnable ~
	Highlight colors in the current buffer that ccc.nvim can pick up.
	The following options are available.
		|ccc-option-highlighter-auto-enable|
		|ccc-option-highlighter-filetypes|
		|ccc-option-highlighter-events|


                                                        *:CccHighlighterDisable*
:CccHighlighterDisable ~
	Disable highlight.


                                                         *:CccHighlighterToggle*
:CccHighlighterToggle ~
	Toggle highlight.



==============================================================================
Key mapping                                                    *ccc-key-mapping*


                                                            *<Plug>(ccc-insert)*
<Plug>(ccc-insert) ~
	Defined in insert mode. Insert the color without detection.



==============================================================================
Variable                                                          *ccc-variable*


                                                                   *g:ccc_color*
g:ccc_color ~
	The color currently being edited is stored in HEX format. If the ccc
	UI is not open, it is empty string ("").



==============================================================================
Autocmd                                                            *ccc-autocmd*


                                                               *CccColorChanged*
CccColorChanged ~
	After changing |g:ccc_color|.



==============================================================================
Highlight                                                        *ccc-highlight*


                                              *CccFloatNormal* *hl-CccFloatNormal*
CccFloatNormal ~
	The highlight for float window.


                                              *CccFloatBorder* *hl-CccFloatBorder*
CccFloatBorder ~
	The highlight for float window border.



==============================================================================
Action                                                              *ccc-action*


All actions are implemented as lua functions.
To customize, use |ccc-option-mappings|.

>
	local ccc = require("ccc")
	local mapping = ccc.mapping
<


                                                           *ccc-action-complete*
complete ~
mapping.complete()
Default mapping: <CR>
	Close the UI and perform a replace or insert.
	If open the previous colors pallet, select the color under the cursor.


                                                               *ccc-action-quit*
quit ~
mapping.quit()
Default mapping: q
	Cancel and close the UI without replace or insert. Don't use |:q|.


                                                  *ccc-action-toggle-input-mode*
toggle_input_mode ~
mapping.toggle_input_mode()
Default mapping: i
	Toggle input mode. See |ccc-option-inputs|.


                                                 *ccc-action-toggle-output-mode*
toggle_output_mode ~
mapping.toggle_output_mode()
Default mapping: o
	Toggle output mode. See |ccc-option-outputs|.


                                                       *ccc-action-toggle-alpha*
toggle_alpha ~
mapping.toggle_alpha()
Default mapping: a
	Toggle show/hide alpha (transparency) slider.
	Transparency is used only when output mode is css_rgb or css_hsl.


                                                 *ccc-action-toggle-prev-colors*
toggle_prev_colors ~
mapping.toggle_prev_colors()
Default mapping: g
	Toggle show and hide the previous colors pallet.
	Use the following to move colors.
		- |ccc-action-goto-next|
		- |ccc-action-goto-prev|
		- |ccc-action-goto-tail|
		- |ccc-action-goto-head|


                                                   *ccc-action-show-prev-colors*
toggle_prev_colors ~
mapping.show_prev_colors()
Default mapping is nothing.
	Show the previous colors pallet.


                                                   *ccc-action-hide-prev-colors*
toggle_prev_colors ~
mapping.hide_prev_colors()
Default mapping is nothing.
	Hide the previous colors pallet.


                                                          *ccc-action-goto-next*
goto_next ~
mapping.goto_next()
Default mapping: w
	Go to next (right) color.


                                                          *ccc-action-goto-prev*
goto_prev ~
mapping.goto_prev()
Default mapping: b
	Go to previous (left) color.


                                                          *ccc-action-goto-tail*
goto_tail ~
mapping.goto_tail()
Default mapping: W
	Go to the last color.


                                                          *ccc-action-goto-head*
goto_head ~
mapping.goto_head()
Default mapping: B
	Go to the first color.


                                      *ccc-action-increase* *ccc-action-increase1*
                                    *ccc-action-increase5* *ccc-action-increase10*
increase ~
mapping.increase1()
mapping.increase5()
mapping.increase10()
mapping.delta(intger)
Default mapping: l / d / , (1 / 5 / 10)
	Increase the value times delta of the slider.
	The delta is defined each color system, e.g. RGB is 1.


                                      *ccc-action-decrease* *ccc-action-decrease1*
                                    *ccc-action-decrease5* *ccc-action-decrease10*
decrease ~
mapping.decrease1()
mapping.decrease5()
mapping.decrease10()
mapping.delta(intger)
Default mapping: h / s / m (1 / 5 / 10)
	Decrease the value times delta of the slider.
	The delta is defined each color system, e.g. RGB is 1.


                                                *ccc-action-set* *ccc-action-set0*
	                                    *ccc-action-set50* *ccc-action-set100*
set ~
mapping.set0()
mapping.set50()
mapping.set100()
ccc.set_percent(integer)
Default mapping: H / M / L (0 / 50 / 100), 1 - 9 (10% - 90%)
	Set the value of the slider as a percentage.



vim:tw=78:ts=8:noet:ft=help:norl:
